This is my Emacs configuration file. It is loaded by =.emacs=. Org mode will
execute the code blocks.

*NOTE:* Don't edit the =configuration.el= file in this directory.
It is created by Org mode. Only edit this one.

To get help: =C-h C-h=
To get help on a mode: =C-h m=

Some parts of this file were copied from other files and tutorials.
* Configuration
** Global Configuration
Changes by git should automatically be refreshed the files files are changed on disk (such as when a git checkout occurs).
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

** Install Packages 
 This is a list of packages to install, to make restoring configuration more streamlined across devices.
 I am in the process of migrating to using use-package, which moves package installation+configration+dependencies
 to a single declaration.

#+BEGIN_SRC emacs-lisp
   ;; Packages to install (alternative to using =M-x package-install=)
   ;; Additional packages have been manually added to the =vendor=
   ;; directory.
   (defvar my-packages
     '(
       ;; Emacs vim
       evil
       evil-magit
       evil-leader
       evil-org

       ;; navigation
       helm
       projectile
       helm-projectile

       ;; git and source control
       magit

       ;; Themes
       leuven-theme
       zenburn-theme
       doom-themes

       ;; Language
       racket-mode
       rust-mode
       cargo

       ;; RSS
       elfeed


       ))

   (dolist (p my-packages)
     (when (not (package-installed-p p))
       (package-install p)))
 #+END_SRC

** Package Settings and Installation
*** Evil 

#+BEGIN_SRC emacs-lisp
     (setq evil-want-C-u-scroll t)
     (setq evil-want-C-i-jump nil)
     (require 'evil)
     (require 'evil-leader)
     (evil-mode t)
     ;; allow for pasting over selected text
     (fset 'evil-visual-update-x-selection 'ignore)
     ;; turn off evil mode for the repl
     (add-to-list 'evil-emacs-state-modes 'REPL)

     ;; Use tab for identation
     (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)

     (evil-leader/set-leader "<SPC>")
     (global-evil-leader-mode)
     (evil-leader/set-key
       "f" 'helm-find-files
       "b" 'helm-mini
       "w" 'persp-switch
       "-" 'text-scale-decrease
       "+" 'text-scale-increase
       "d" 'neotree-toggle
       "x" 'helm-M-x
       "r" 'helm-M-x
       "k" 'kill-buffer
       "n" 'elscreen-create) ; new tab

     ;; leader maps for org mode
     (evil-leader/set-key-for-mode 'org-mode
       "t"  'org-show-todo-tree
       "a"  'org-agenda
       "c"  'org-archive-subtree
       "l"  'evil-org-open-links
       "o"  'org-open-at-point
       "e"  'show-branches)

  ;; make Evil's sentence navigation closer to Vim's
  (setf sentence-end-double-space nil)
#+END_SRC
        
*** Helm

#+BEGIN_SRC emacs-lisp
;; See: https://github.com/emacs-helm/helm/wiki#install
(require 'helm)
(require 'helm-config)

;; See:
;; http://cachestocaches.com/2016/12/vim-within-emacs-anecdotal-guide/

(define-key helm-map (kbd "C-j") 'helm-next-line)
(define-key helm-map (kbd "C-k") 'helm-previous-line)

;; This next line overrides Emacs' help keybinding.
;; (define-key helm-map (kbd "C-h") 'helm-next-source)
;; (define-key helm-map (kbd "C-S-h") 'describe-key)
;; (define-key helm-map (kbd "C-l") (kbd "RET"))
(define-key helm-map [escape] 'helm-keyboard-quit)
;; TODO fix this. Emacs can't find helm-find-files-map
; (dolist (keymap (list helm-find-files-map helm-read-file-map))
;   (define-key keymap (kbd "C-l") 'helm-execute-persistent-action)
;   (define-key keymap (kbd "C-h") 'helm-find-files-up-one-level)
;   (define-key keymap (kbd "C-S-h") 'describe-key))

;; See:
;; http://cachestocaches.com/2016/12/vim-within-emacs-anecdotal-guide/
(define-key evil-ex-map "b " 'helm-mini)
(define-key evil-ex-map "e" 'helm-find-files)


;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

;; Use helm fo finding functions, files and bookmarks
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)


(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)
(setq recentf-max-menu-items 1000)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z


(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(helm-mode 1)
#+END_SRC

*** Magit

#+BEGIN_SRC emacs-lisp
   (require 'evil-magit)
   (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

*** Org Mode
**** Set up Agenda & 
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Dropbox/org/gtd/inbox.org"
                           "~/Dropbox/org/gtd/projects.org"
                           "~/Dropbox/org/gtd/tickler.org"
                           ))
    
  (setq org-agenda-custom-commands 
        '(("o" "At the office" tags-todo "@office"
           ((org-agenda-overriding-header "Office")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))

  (defun my-org-agenda-skip-all-siblings-but-first ()
    "Skip all but the first non-done entry."
    (let (should-skip-entry)
      (unless (org-current-is-todo)
        (setq should-skip-entry t))
      (save-excursion
        (while (and (not should-skip-entry) (org-goto-sibling t))
          (when (org-current-is-todo)
            (setq should-skip-entry t))))
      (when should-skip-entry
        (or (outline-next-heading)
            (goto-char (point-max))))))
		  
  (defun org-current-is-todo ()
    (string= "TODO" (org-get-todo-state)))
#+END_SRC

#+RESULTS:
: org-current-is-todo

*** Set up capure templates for Inbox and Ticker
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo [inbox]" entry
           (file+headline "~/Dropbox/org/gtd/inbox.org" "In")
           "* TODO %i%?")
          ("T" "Tickler" entry
           (file+headline "~/Dropbox/org/gtd/tickler.org" "Tickler")
              "* %i%? \n %U")))
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC

#+RESULTS:
| sequence | TODO(t) | WAITING(w) |   |   | DONE(d) | CANCELLED(c) |

**** Set up refile targets for GTD files
#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path nil)
  (setq org-refile-targets '(("~/Dropbox/org/gtd/projects.org" :maxlevel . 1)
                             ("~/Dropbox/org/gtd/tickler.org" :maxlevel . 2)
                             ("~/Dropbox/org/gtd/someday.org" :level . 1)))
#+END_SRC

#+RESULTS:
: ((gtd/projects.org :maxlevel . 1) (gtd/tickler.org :maxlevel . 2) (gtd/someday.org :level . 1))


**** Configure org to work with EVIL key bindings
#+BEGIN_SRC emacs-lisp
(require 'evil-org)
(add-hook 'org-mode-hook 'evil-org-mode)
(evil-org-set-key-theme '(navigation insert textobjects additional calendar))
(require 'evil-leader)
(global-evil-leader-mode)
#+END_SRC

**** Org babel configuration for literate programming
#+BEGIN_SRC emacs-list
    (org-babel-do-load-languages
    'org-babel-load-languages
    '((scheme . t)
    (emacs-lisp . t)
    (python . t)
    (racket . t)
    (rust . t)
    ))

#+END_SRC
*** Elfeed RSS
#+BEGIN_SRC emacs-lisp
  (setq elfeed-feeds
        '(
        "http://xkcd.com/rss.xml"
        "https://www.jimtownmade.com/the-jimtown-enquirer?format=RSS"
        "https://mechanical-sympathy.blogspot.com/feeds/posts/default?alt=rss"
        "http://www.scottaaronson.com/blog/?feed=rss2"
        "http://www.stefankrause.net/wp/?feed=rss2"
        "http://eli.thegreenplace.net/feeds/all.atom.xml"
        "http://blog.mikemccandless.com/feeds/posts/default?alt=rss"
        "http://lambda-the-ultimate.org/rss.xml"
        "http://slatestarcodex.com/feed/"
        "http://planetdjango.org/feed/"
        "https://ericlippert.com/feed/"
        "https://stackoverflow.blog/engineering/feed/"
        "https://www.joelonsoftware.com/feed/"
        "http://feeds.hanselman.com/ScottHanselman"
        "https://80000hours.org/feed/"
        "https://this-week-in-rust.org/rss.xml"
        "http://lesswrong.com/.rss"
        "https://jvns.ca/"
  ))
#+END_SRC

*** Projectile
Enable projectile. Configuration reference: http://tuhdo.github.io/helm-projectile.html:
#+BEGIN_SRC emacs-lisp
  (require 'projectile)
  (require 'helm-projectile)
  (projectile-mode)
  (setq projectile-completion-system 'helm)

  ;; use indexing external indexing tools
  (setq projectile-indexing-method 'alien)
  ;; Use helm 
  (setq projectile-switch-project-action 'helm-projectile)
#+END_SRC
*** Dired sidebar
#+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
    :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
    :ensure t
    :commands (dired-sidebar-toggle-sidebar)
    :config
    (setq dired-sidebar-subtree-line-prefix " .")
    (cond
     ((eq system-type 'darwin)
      (if (display-graphic-p)
          (setq dired-sidebar-theme 'icons)
        (setq dired-sidebar-theme 'nerd))
      (setq dired-sidebar-face '(:family "Helvetica" :height 140)))
     ((eq system-type 'windows-nt)
      (setq dired-sidebar-theme 'nerd)
      (setq dired-sidebar-face '(:family "Lucida Sans Unicode" :height 110)))
     (:default
      (setq dired-sidebar-theme 'nerd)
      (setq dired-sidebar-face '(:family "Arial" :height 140))))

    (setq dired-sidebar-use-term-integration t)
    (setq dired-sidebar-use-custom-font t)

    (use-package all-the-icons-dired
      ;; M-x all-the-icons-install-fonts
      :ensure t
      :commands (all-the-icons-dired-mode)))
#+END_SRC
** Editing
   
*** Use utf-8
    
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

#+END_SRC
*** Syntax higlighting and tabs

  Highlight matching parentheses and lines.

  #+BEGIN_SRC emacs-lisp
     (require 'paren)
     (show-paren-mode 1)
     (global-hl-line-mode 1)
  #+END_SRC

  Use spaces rather than tabs.
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
    (setq indent-line-function 'insert-tab)
    (setq org-src-tab-acts-natively t)
  #+END_SRC

  When you visit a file, point goes to the last place where it
  was when you previously visited the same file.
  http://www.emacswiki.org/emacs/SavePlace
  keep track of saved places in ~/.emacs.d/places

  #+BEGIN_SRC emacs-lisp
     (require 'saveplace)
     (setq-default save-place t)
     (setq save-place-file (concat user-emacs-directory "places"))
  #+END_SRC

  Emacs can automatically create backup files. This tells Emacs to
  put all backups in ~/.emacs.d/backups. More info:
  http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html

  #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                    "backups"))))
     (setq auto-save-default t)
  #+END_SRC

  Set commenting keybinding.

  #+BEGIN_SRC emacs-lisp
  (defun toggle-comment-on-line ()
    "comment or uncomment current line"
    (interactive)
    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
  (global-set-key (kbd "C-;") 'toggle-comment-on-line)
  #+END_SRC

  Turn on recent file mode so that you can more easily switch to recently edited files when you first start emacs

  #+BEGIN_SRC emacs-lisp
  (setq recentf-save-file (concat user-emacs-directory ".recentf"))
  (require 'recentf)
  (recentf-mode 1)
  #+END_SRC
** Theme and Appearance
*** Turn on line numbers-- remove in future emacs versions

 #+BEGIN_SRC emacs-lisp
    (global-linum-mode)
 #+END_SRC

*** Set the default font and font scaling bindings
 #+BEGIN_SRC emacs-lisp
 (setq line-spacing '0.25)

 ;; increase and decrease text size
 (global-set-key (kbd "C-=") 'text-scale-increase)
 (global-set-key (kbd "C--") 'text-scale-decrease)
 #+END_SRC

*** Remove the toolbar and scrollbar. Enable the menu bar.
 #+BEGIN_SRC emacs-lisp
 (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
 (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
 (if (fboundp 'menu-bar-mode) (menu-bar-mode 1))
 #+END_SRC

*** Set up modeline and set theme
#+BEGIN_SRC emacs-lisp

  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
  (spaceline-helm-mode)
  (load-theme 'doom-one t)
#+END_SRC

*** Startup behavior- open todo.org
 #+BEGIN_SRC emacs-lisp
 ;; Go straight to another file on startup
 (setq inhibit-startup-message t)
 (find-file (concat org-directory "gtd/inbox.org"))
 #+END_SRC
** Language Configuration
*** Python
#+BEGIN_SRC emacs-lisp
  (require 'elpy)
  (elpy-enable)
#+END_SRC
*** Racket 
#+BEGIN_SRC emacs-lisp
 (require 'racket-mode)

 (setq racket-racket-program "\"C:/Program Files/Racket/racket.exe\"")
 (setq racket-raco-program "\"C:/Program Files/Racket/raco.exe\"")
 (setq org-babel-racket-command "\"C:/Program Files/Racket/racket.exe\"")
 #+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp
  (require 'rust-mode)
  (autoload 'rust-mode "rust-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
#+END_SRC
*** Typescript
#+BEGIN_SRC emacs-lisp
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode)

  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)

  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))
#+END_SRC
*** 
    
